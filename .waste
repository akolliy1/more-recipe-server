createdAt: Date.now(),
                        discription: null,
                        downvotes: 0,
                        id: 7,
                        imageId: null,
                        imageUrl: null,
                        ingredients: "water,salt , rice",
                        name: "Fried Rice",
                        procedure: "Put the rice in water wash it well and have it in your plate",
                        updatedAt: Date.now(),
                        upvotes: 0,
                        userId: null,
                        viewCount: 0,

import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken'
import Sequelize from 'sequelize';
import {inputValidation} from "../middlewares/inputValidation";;
import { User, Recipe, Review, Favorite, Upvote, Downvote } from '../models';

/**
 * @description Validate username and Email
 * @param {object} Username
 * @param {object} Email
 * @returns {Promise} if validated
 */
const userNameAndEmailValidation = (username, email) => {
    const promise = new Promise((resolve, reject) => {
        const Op = Sequelize.Op;
        User
            .findOne({
                attributes: ['email', 'username'],
                where: {
                    [Op.or]: [{ username: username }, { email: email }],
                }
            })
            .then((user) => {
                if (user) {
                    let field;
                    if (user.username.toUpperCase() === username.toUpperCase()) {
                        field = 'Username';
                    }
                    else {
                        field = 'Email'
                    }
                    reject(`${field} already exist`)
                }
                resolve();
            });
    });
    return promise;
}

class Users {
   /**
   * @description User signup method
   *
   * @param {object} req HTTP request object
   * @param {object} res HTTP response object
   *
   * @returns {object} object
   */
    static signUp( req, res) {
        // console.log(req)
        const name = req.body.name,
            username = req.body.username,
            email = req.body.email;
        let password = req.body.password;
        password = bcrypt.hashSync(password, bcrypt.genSaltSync(10));
        const errors = inputValidation( req, res );
        if(errors) {
            return res.status(400).send(errors)
        } 
        else{
            userNameAndEmailValidation(username, email).then(() => {
                User
                    .create({
                        name,
                        username,
                        email,
                        imageUrl: '',
                        password
                    })
                    .then((user) => {
                        const payload = { id: user.id, username: user.username, email: user.email };
                        const token = jwt.sign(payload, process.env.JWT_SECRET, {
                            expiresIn: '24h'
                        });
                        res.status(201).send({
                            success: true,
                            message: 'User created successfully',
                            user
                        })
                    })
                    .catch(error => res.status(500).json({
                        success: false,
                        message: `Error creating user ${error.message}`
                    }));
            })
                .catch(error =>
                    res.status(409).json({
                        success: false,
                        message: error
                    })
                );
        }
        return this;
    }

   /**
   * @description - Sign In a user (Search for user)
   *
   * @param {object} req - HTTP Request
   *
   * @param {object} res - HTTP Response
   *
   * @return {object} this - Class instance
   *
   * @memberof Users
   */
    static signIn(req,res) {
        const Op = Sequelize.Op;     
        return User.find({
            where: {
                [Op.or]: [{username: req.body.username},{email: req.body.email}],
            }
        })
        .then((user) => {
            if(!user) {
                return res.status(401).json('User not found')
            } else {
                const { id, username, email, password } = user
                const payload = { id, username, email }
                const token = jwt.sign(payload, process.env.JWT_SECRET, {
                    expiresIn: '4h'
                })
                if(bcrypt.compareSync(req.body.password, password)) {
                    return res.status(200).send({
                        success: true,
                        message: 'Signin successfuly',
                        user,
                        token
                    })
                } else {
                    return res.status(400).send({
                        msg: 'Incorrect password'
                    })
                }
                
            }
        })

    };
    /**
     * @description Get A User details
     * @param {object} req - Request
     * @param {object} res - Response
     * @returns {object} about User
     */
    static listAUser(req, res) {
        const userId = req.param;
        const promise = new Promise((resolve, reject) => {
            User
            .findOne({
                attributes: ['id', 'name', 'username', 'email', 'imageUrl'],
                where: { id: userId }
            })
            .then((user) => {
                if (!user) {
                    reject(
                        res.status(400).send({
                            success: false,
                            message: 'User not found'
                        })
                    )
                } else {
                    const userInfo = {id: userId, name, username, email, imageUrl};
                    Recipe
                    .count({where: {userId}})
                    .then((recipeCount) => {

                        userInfo.recipeCount = recipeCount;

                        Review.count({where: {userId}})

                        .then((reviewCount) => {
                            userInfo.reviewCount = reviewCount;

                            Favorite.count({where: {userId}})
                            .then((favoriteCount) => {
                                userInfo.favoriteCount = favoriteCount;
                                resolve(
                                    res.status(200).send({
                                        success: true,
                                        userInfo,
                                        message: 'User found and succefully count contents'
                                    })
                                )
                            })
                        })
                    })
                    .catch(() => {
                        reject(
                            res.status(400).send({
                                success: false,
                                message: 'No user details found'
                            })
                        )
                    })
                }
            })
            .catch(()=> {
                reject(
                    res.status(400).send({
                        success: false,
                        message: 'Error fetching user details'
                    })
                )
            })
        })
        return promise
    }
    static destroy(req, res) {
        return User
            .findById(req.params.userId)
            .then(user => {
                if (!user) {
                    return res.status(400).send({
                        message: 'User Not Found',
                    });
                }
                return user
                    .destroy()
                    .then(() => res.status(200).send({
                        message: "We are sorry to let you go"
                    }))
                    .catch(error => res.status(400).send(error));
            })
            .catch(error => res.status(400).send(error));
    }
}

export default Users;

                    User
                    .findOne({
                        where: {
                            email: req.body.email
                        }
                    })
                    .then((email) => {
                        if(!email) {
                            resolve()
                        } else {
                            res.status(409).send({
                                success: false,
                                message: `Email already exist`
                            })
                        }
                    })





import models from "../models";
/**
 * @description User input data for email and username 
 * @extends to controllers User file
 * @param { User } User models
 * @param { req } email - email check
 * @param { res } username - username check
 * @param { next } resolve - resolve if no problem
 * @returns {Promise} promise
 */

const { Recipe } = models
export const inputValidation = ( name='', username='', email='', password='') => {
    const promise = new Promise((resolve, reject) => {
        req.checkBody({
          name: {
                notEmpty: {
                    options: true,
                    errorMessage: 'name field cannot be empty'
                },
                isLength: {
                    options: [{ min: 3 }],
                    errorMessage: 'Name should be atleast 3 character'
                },
                matches: {
                    options: [(/^[A-Za-z][^ ]+( [^]+)*$/g)],
                    errorMessage: 'Invalid name, ensure you name contain only alphabets'
                }
            },
            username: {
                notEmpty: {
                    options: true,
                    errorMessage: 'Username field cannot be empty'
                },
                isLength: {
                    options: [{ min: 6 }],
                    errorMessage: 'Username should be atleast 6 characters'
                },
                matches: {
                    options: [(/^[a-z0-9]+$/gi)],
                    errorMessage: 'Invalid Username, kindly ensure your username is alphanumeric and no spacing'
                }
            },
            email: {
                notEmpty: {
                    options: true,
                    errorMessage: 'Email field cannot be empty'
                },
                isEmail: {
                    errorMessage: 'Please input a valid Email Adrress'
                }
            },
            password: {
                notEmpty: {
                    options: true,
                    errorMessage: 'Password field cannot be empty'
                },
                isLength: {
                    options: [{ min: 8 }],
                    errorMessage: 'Please input a valid password with atleast 8 characters'
                },
                matches: {
                    options: [(/^([^ ]+)*$/g)],
                    errorMessage: 'Invalid password, ensure your password contain only uppercase, lowercase or any special character'
                }
            }
        });
        const errors = req.validationErrors();
        if (errors) {
            const allErrors = [];
            errors.forEach((error) => {
                allErrors.push({
                    message: error.msg,
                    field: error.param
                })
            });
            const errors = allErrors;
            reject({
                success: false,
                errors
            })
        }
        next()
    })
    return promise

}









req.checkBody("email", "Enter a valid email address.").isEmail();

req.checkBody(
    "username",
    "Username Exist Enter another username").isle;

req.checkBody(
    "team_twitter",
    "Enter a valid Twitter URL").optional().matches("http://twitter.com/*");

req.checkBody(
    "contestant_count",
    "Contestant count must be a number and one that is divisible by 2"
).isNumber().isDivisibleBy(2);

req.checkBody(
    "page_color",
    "Page colour must be a valid hex color"
).isHexColor();


const { check, validationResult } = require('express-validator/check');
const { matchedData, sanitize } = require('express-validator/filter');

app.post('/user', [
    check('username')
        // Every validator method in the validator lib is available as a
        // method in the check() APIs.
        // You can customize per validator messages with .withMessage()
        .isEmail().withMessage('must be an email')

        // Every sanitizer method in the validator lib is available as well!
        .trim()
        .normalizeEmail()

        // ...or throw your own errors using validators created with .custom()
        .custom(value => {
            return findUserByEmail(value).then(user => {
                throw new Error('this email is already in use');
            })
        }),

    // General error messages can be given as a 2nd argument in the check APIs
    check('password', 'passwords must be at least 5 chars long and contain one number')
        .isLength({ min: 5 })
        .matches(/\d/),

    // No special validation required? Just check if data exists:
    check('addresses.*.street').exists(),

    // Wildcards * are accepted!
    check('addresses.*.postalCode').isPostalCode(),

    // Sanitize the number of each address, making it arrive as an integer
    sanitize('addresses.*.number').toInt()
], (req, res, next) => {
    // Get the validation result whenever you want; see the Validation Result API for all options!
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(422).json({ errors: errors.mapped() });
    }

    // matchedData returns only the subset of data validated by the middleware
    const user = matchedData(req);
    createUser(user).then(user => res.json(user));
});



### Database errors
{
    "name": "SequelizeUniqueConstraintError",
    "errors": [
        {
            "message": "username must be unique",
            "type": "unique violation",
            "path": "username",
            "value": "iamuser",
            "origin": "DB",
            "instance": {
                "id": null,
                "name": "adesanmi akolade",
                "username": "iamuser",
                "email": "adesanmi@gmail.com",
                "imageUrl": "",
                "password": "$2a$10$kGLjdXz/trxKKe9I7A2r..ZrK5G8QoXof71G7lwXlFTh2hHQwnE0m",
                "updatedAt": "2018-04-17T14:41:19.379Z",
                "createdAt": "2018-04-17T14:41:19.379Z"
            },
            "validatorKey": "not_unique",
            "validatorName": null,
            "validatorArgs": []
        }
    ],
    "fields": {
        "username": "iamuser"
    },
    "parent": {
        "name": "error",
        "length": 227,
        "severity": "ERROR",
        "code": "23505",
        "detail": "Key (username)=(iamuser) already exists.",
        "schema": "public",
        "table": "Users",
        "constraint": "Users_username_key",
        "file": "src\\backend\\access\\nbtree\\nbtinsert.c",
        "line": "410",
        "routine": "_bt_check_unique",
        "sql": "INSERT INTO \"Users\" (\"id\",\"name\",\"username\",\"email\",\"imageUrl\",\"password\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,'adesanmi akolade','iamuser','adesanmi@gmail.com','','$2a$10$kGLjdXz/trxKKe9I7A2r..ZrK5G8QoXof71G7lwXlFTh2hHQwnE0m','2018-04-17 14:41:19.379 +00:00','2018-04-17 14:41:19.379 +00:00') RETURNING *;"
    },
    "original": {
        "name": "error",
        "length": 227,
        "severity": "ERROR",
        "code": "23505",
        "detail": "Key (username)=(iamuser) already exists.",
        "schema": "public",
        "table": "Users",
        "constraint": "Users_username_key",
        "file": "src\\backend\\access\\nbtree\\nbtinsert.c",
        "line": "410",
        "routine": "_bt_check_unique",
        "sql": "INSERT INTO \"Users\" (\"id\",\"name\",\"username\",\"email\",\"imageUrl\",\"password\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,'adesanmi akolade','iamuser','adesanmi@gmail.com','','$2a$10$kGLjdXz/trxKKe9I7A2r..ZrK5G8QoXof71G7lwXlFTh2hHQwnE0m','2018-04-17 14:41:19.379 +00:00','2018-04-17 14:41:19.379 +00:00') RETURNING *;"
    },
    "sql": "INSERT INTO \"Users\" (\"id\",\"name\",\"username\",\"email\",\"imageUrl\",\"password\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,'adesanmi akolade','iamuser','adesanmi@gmail.com','','$2a$10$kGLjdXz/trxKKe9I7A2r..ZrK5G8QoXof71G7lwXlFTh2hHQwnE0m','2018-04-17 14:41:19.379 +00:00','2018-04-17 14:41:19.379 +00:00') RETURNING *;"
}